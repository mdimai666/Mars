@page "/nodered"
@implements IDisposable
@using AppFront.Shared.Hub
@using Mars.Core.Models
@using Mars.Nodes.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Mars.Nodes.Workspace
@using Mars.Nodes.Workspace.Services

@if (Busy)
{
    <div class="p-5 main-fill xcenter">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>

    </div>
}
else
{
    if (nodes is null)
    {
        <h1>is null</h1>
    }
    else
    {
        <NodeEditor1 OnDeploy="OnDeploy"
                     OnInject="OnInjectClick"
                     OnCmdClick="OnCmdClick"
                     @ref=editor1 @bind-AllNodes=@nodes>
            <SectionActions>
                <XActionsDropDown />
            </SectionActions>
        </NodeEditor1>
    }
}

@code {
    [Inject] INodeServiceClient service { get; set; } = default!;

    [Inject] ClientHub hub { get; set; } = default!;

    NodeEditor1? editor1 = default!;

    bool Busy = false;

    IDictionary<string, Node> nodes = new Dictionary<string, Node>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        hub.OnNodeStatus += OnNodeStatus;
        hub.OnDebugMsg += OnDebugMsg;
        hub.OnNodeRunningTaskCountChanged += OnNodeRunningTaskCountChanged;

        Load();
    }

    public void Dispose()
    {
        hub.OnNodeStatus -= OnNodeStatus;
        hub.OnDebugMsg -= OnDebugMsg;
        hub.OnNodeRunningTaskCountChanged -= OnNodeRunningTaskCountChanged;
    }

    void OnNodeStatus(string nodeId, NodeStatus nodeStatus)
    {
        var node = nodes.TryGetValue(nodeId, out var n) ? n : null;
        if (node is not null)
        {
            node.enable_status = string.IsNullOrEmpty(nodeStatus.Text) == false;
            node.status = nodeStatus.Text;
        }
        StateHasChanged();
    }

    void OnDebugMsg(string nodeId, DebugMessage msg)
    {
        editor1!.AddDebugMessage(msg);
    }

    void OnNodeRunningTaskCountChanged(int currentTaskCount)
    {
        editor1.SetCurrentTaskCount(currentTaskCount);
    }

    async void Load()
    {
        Busy = true;
        StateHasChanged();

        try
        {
            var data = await service.Load();
            var recivedNodes = data.Nodes.ToDictionary(s => s.Id);
            foreach (var state in data.NodesState)
            {
                var node = recivedNodes[state.Key];
                node.status = state.Value.Status;
                node.enable_status = true;
            }
            nodes = recivedNodes.Values.ToDictionary(s => s.Id);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.Message);
        }

        Busy = false;
        StateHasChanged();

    }

    async void OnDeploy(IEnumerable<Node> Nodes)
    {
        var res = await service.Deploy(Nodes);

        if (res.Ok)
        {
            foreach (var node in nodes.Values) node.changed = false;
        }

        editor1!.AddDebugMessage(new DebugMessage
        {
            // Topic = (res.Ok ? "OK" : "FAIL"),
            Message = res.Message,
            Level = res.Ok ? MessageIntent.Info : MessageIntent.Error
        });
    }

    async void OnInjectClick(string nodeId)
    {

        bool useWs = false;

        Console.WriteLine($">Inject:{nodeId}");

        if (useWs)
        {

            hub.Inject(nodeId);

            return;
        }
        else
        {
            var res = await service.Inject(nodeId);

            string ok = (res.Ok ? "OK" : "FAIL");
        }
    }

    void OnCmdClick(string cmd)
    {
        hub.SendMessage("other");
    }

}
