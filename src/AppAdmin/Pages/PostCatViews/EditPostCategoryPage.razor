@page "/EditPostCategory"
@page "/EditPostCategory/{ID:guid}"

@using Blazored.TextEditor
@using Microsoft.AspNetCore.Authorization
@using PostCategory=AppShared.Models.PostCategory

@attribute [Authorize(Roles = "Admin")]
@inject IStringLocalizer<AppRes> L


<ContentWrapper>

    <StandartEditContainer ID=@ID TModel=PostCategory TService=PostCategoryService @ref=f CanCreate=false>
        <ChildContent>
            <FormItem>
                <AntDesign.Input @bind-Value=@context.Title Size="@InputSize.Large" />
            </FormItem>
            <FormItem>
                <AntDesign.Input @bind-Value=@context.Slug Size="@InputSize.Small" />
            </FormItem>
            @*<FormItem WrapperColSpan="10">
            <AntDesign.Input @bind-Value=@context.Style />
            </FormItem>*@


            <div class="spacer-2"></div>

            <div class="d-menuitems">
                <div class="row">
                    <div class="col-lg-6">
                        <label class="d-block fw-bold mb-3">
                            Структура
                        </label>
                        <Tree DefaultExpandAll BlockNode Draggable Checkable=false
                              DataSource="context.CategoryItems.Where(s=>s.ParentId == Guid.Empty)"
                              ChildrenExpression="x => x.DataItem.GetItems(context)"
                              IsLeafExpression="x => x.DataItem.GetItems(context)?.Count() == 0"
                              KeyExpression="x => x.DataItem.Id.ToString()"
                              Context="item"
                              OnClick=@(x => _selMenu=x.Node.DataItem)
                              TItem="PostCategoryItem"
                              OnDragEnd=TreeOnDragEnd OnDrop=TreeOnDrop>
                            <TitleTemplate>
                                <div class="d-nav-menu d-flex border px-2 pt-1 @(item.DataItem.Disable?"disabled":"")">
                                    <div class="d-navmenu-title flex-fill">
                                        @item.DataItem.Title
                                        <div class="text-secondary">
                                            @item.DataItem.Disable
                                        </div>
                                    </div>
                                    <div class="d-navmenu-tools d-flex flex-column align-items-end">
                                        <a class="text-danger" @onclick=@(e=>OnDeleteMenuItem(item.DataItem))>удалить</a>

                                        <Dropdown Trigger="@(new Trigger[] { Trigger.Click })">
                                            <Overlay>
                                                <Menu>
                                                    <MenuItem OnClick=@(e=>DropdownMenu_Copy(item.DataItem))>
                                                        копировать
                                                    </MenuItem>
                                                </Menu>
                                            </Overlay>
                                            <ChildContent>
                                                <a class="ant-dropdown-link fz14px ms-2" @onclick:preventDefault>
                                                    действия <Icon Type="down" />
                                                </a>
                                            </ChildContent>
                                        </Dropdown>
                                    </div>
                                </div>
                            </TitleTemplate>
                        </Tree>
                        <div class="tree-footer-action fz14px p-2 text-end">
                            <a class="text-accent" @onclick=@(e=>AddNewMenuItem())>+новый</a>

                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="card navmenu-properties">
                            <div class="card-body">
                                <div class="d-flex">
                                    <h6 class="flex-fill">Свойства</h6>
                                    <a class="fz14px text-accent" @onclick=@(e=>_selMenu=null)>отмена</a>
                                </div>
                                @if (_selMenu is null)
                                {
                                    <div class="text-secondary p-2">
                                        &lt;Выберите для редактирования&gt;
                                    </div>
                                }
                                else
                                {
                                    <div class="navmenu-edit-form">

                                        <FormItem>
                                            <AntDesign.Input @bind-Value=@_selMenu.Title />
                                        </FormItem>
                                        <AntDesign.Checkbox @bind-Value=@_selMenu.Disable>
                                            Отключить
                                        </AntDesign.Checkbox>

                                        <hr />

                                        <div class="actions">
                                            <DDeleteButton OnConfirm="e=>OnDeleteMenuItem(_selMenu)" Type="text" />

                                            <span class="ms-2">
                                                <Button Icon="left" OnClick=@(e=>NodePropArrowClick("left")) />
                                                <Button Icon="right" OnClick=@(e=>NodePropArrowClick("right")) />
                                            </span>
                                            <span class="ms-2">
                                                <Button Icon="up" OnClick=@(e=>NodePropArrowClick("up")) />
                                                <Button Icon="down" OnClick=@(e=>NodePropArrowClick("down")) />
                                            </span>
                                        </div>

                                    </div>

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </ChildContent>
        @*<SectionExtraSidebar>
            <div class="card">
                <div class="card-body">
                    <Switch @bind-Checked="context.Disable">
                        <UnCheckedChildrenTemplate>
                            Отключить
                        </UnCheckedChildrenTemplate>
                        <CheckedChildrenTemplate>
                            <div class="text-danger">
                                Отключен
                            </div>
                        </CheckedChildrenTemplate>
                    </Switch>
                </div>
            </div>
        </SectionExtraSidebar>*@
    </StandartEditContainer>

</ContentWrapper>

@code {
    [Parameter] public Guid ID { get; set; }
    StandartEditContainer<PostCategory, PostCategoryService> f = default!;

    PostCategoryItem? _selMenu = null;

    void OnDeleteMenuItem(PostCategoryItem item)
    {
        if (_selMenu == item) _selMenu = null;

        TheRecurseDelete(item);
        f.Model.CategoryItems.Remove(item);
    }

    void TheRecurseDelete(PostCategoryItem item)
    {
        foreach (var h in item.GetItems(f.Model))
        {
            TheRecurseDelete(h);
        }
    }

    void DropdownMenu_Copy(PostCategoryItem item)
    {
        var copy = PostCategoryItem.Copy(item);
        int index = f.Model.CategoryItems.IndexOf(item);
        f.Model.CategoryItems.Insert(index, copy);
    }

    void AddNewMenuItem()
    {
        f.Model.CategoryItems.Add(new()
            {
                Title = $"категория ({f.Model.CategoryItems.Count})"
            });
    }

    void TreeOnDragEnd(TreeEventArgs<PostCategoryItem> e)
    {
        //Console.WriteLine("TreeOnDragEnd");
        //Console.WriteLine($">> e.TargetNode = {e.TargetNode.DataItem.Title}");
        //Console.WriteLine($">> e.Node = {e.Node.DataItem.Title}");
    }
    void TreeOnDrop(TreeEventArgs<PostCategoryItem> e)
    {
        //Console.WriteLine("TreeOnDrop");
        Console.WriteLine($"e.Node = {e.Node.DataItem.Title}|{e.Node.Class}");
        Console.WriteLine($"e.TargetNode ==> {e.TargetNode.DataItem.Title}|{e.TargetNode.Class}");

        if (e.TargetNode != null && e.TargetNode != e.Node)
        {
            e.Node.DataItem.ParentId = e.TargetNode.DataItem.Id;
        }

    }

    void NodePropArrowClick(string nav)
    {
        var items = f.Model.CategoryItems;

        if (_selMenu is null) return;

        if (nav == "left")
        {
            if (_selMenu.ParentId == Guid.Empty) return;
            Guid newParentId = Guid.Empty;
            var parentOfParent = Parent();
            if (parentOfParent is not null)
            {
                _selMenu.ParentId = parentOfParent.ParentId;
            }

        }
        else if (nav == "right")
        {
            var soseds = GetSoseds().ToList();
            var index = soseds.IndexOf(_selMenu);
            if (index > 0)
            {
                var prev = soseds[index - 1];
                _selMenu.ParentId = prev.Id;

            }
        }
        else if (nav == "up")
        {
            var soseds = GetSoseds().ToList();
            var index = soseds.IndexOf(_selMenu);
            if (index > 0)
            {
                var prev = soseds[index - 1];
                int globalIndex = items.IndexOf(prev);

                items.Remove(_selMenu);
                items.Insert(globalIndex, _selMenu);

            }
        }
        else if (nav == "down")
        {
            var soseds = GetSoseds().ToList();
            var index = soseds.IndexOf(_selMenu);
            var count = soseds.Count;
            if (index < count - 1)
            {
                var next = soseds[index + 1];
                int globalIndex = items.IndexOf(next);

                items.Remove(_selMenu);
                items.Insert(globalIndex, _selMenu);

            }
        }

    }

    PostCategoryItem Parent(Guid? id = null)
    {
        return (_selMenu!.ParentId == Guid.Empty ? null : f.Model.CategoryItems.FirstOrDefault(s => s.Id == (id ?? _selMenu.ParentId)))!;
    }

    IEnumerable<PostCategoryItem> GetSoseds()
    {
        var parent = Parent();
        if (parent is null)
        {
            return f.Model.CategoryItems.Where(s => s.ParentId == Guid.Empty);
        }
        else
        {
            return parent.GetItems(f.Model);
        }
    }
}

<style>
    .d-nav-menu.disabled {
        opacity: 0.5;
        color: gray;
    }
</style>
