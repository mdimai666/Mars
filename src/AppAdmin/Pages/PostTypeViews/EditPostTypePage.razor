@page "/EditPostType"
@page "/EditPostType/{ID:guid}"

@using Blazored.TextEditor
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components

@attribute [Authorize(Roles = "Admin")]


<ContentWrapper>

    <StandartEditContainer ID=@ID TModel=PostType TService=PostTypeService @ref=f
                           AfterDelete=AfterDelete
                           AfterSave="AfterSave"
                           CanCreate=false>
        <ChildContent>
            <AntDesign.FormItem>
                <AntDesign.Input @bind-Value=@context.Title Size="@InputSize.Large" />
            </AntDesign.FormItem>
            <AntDesign.FormItem WrapperColSpan="10">
                <AntDesign.Input @bind-Value=@context.TypeName />
            </AntDesign.FormItem>

            <div class="spacer-2"></div>

            <div class="vstack gap-4">

                <div class="card">
                    <div class="card-header">
                        Возможности
                    </div>
                    <div class="card-body">
                        <div class="d-flex flex-wrap">

                            @foreach (var d in PostType.ListOfFeatures())
                            {
                                <div class="col-lg-4">
                                    <AntDesign.Checkbox Checked=@context.EnabledFeatures.Contains(d.Key)
                                                        CheckedChange=@(v=>{
                                                    if(v)context.EnabledFeatures.Add(d.Key);
                                                    else context.EnabledFeatures.Remove(d.Key);
                                                    })>
                                        @d.Value
                                    </AntDesign.Checkbox>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        Forms
                    </div>
                    <div class="card-body">

                        <FormItem2 For="()=>context.FormList.SourceUriSetter">
                            <FluentTextField Label="@nameof(PostType.FormList)"
                                             @bind-Value=@context.FormList.SourceUriSetter />
                        </FormItem2>
                        <div class="spacer-1"></div>
                        <FormItem2 For="()=>context.FormEdit.SourceUriSetter">
                            <FluentTextField Label="@nameof(PostType.FormEdit)"
                                             @bind-Value=@context.FormEdit.SourceUriSetter />
                        </FormItem2>
                    </div>
                </div>

                @if (context.EnabledFeatures.Contains(nameof(Post.Content)))
                {
                    <div class="card">
                        <div class="card-header">
                            @nameof(PostType.PostContentType)
                        </div>
                        <div class="statuses card-body">

                            <div class="px-1 py-3">
                                <AntDesign.Select @bind-Value="@context.PostContentType"
                                                  TItemValue="EPostContentType"
                                                  TItem="string"
                                                  Style="width: 250px;"
                                                  EnableSearch>
                                    <SelectOptions>
                                        @foreach (var item in PostType.ListPostContentType())
                                        {
                                            <SelectOption TItemValue="EPostContentType" TItem="string" Value=@item.Key Label=@item.Value />
                                        }
                                    </SelectOptions>
                                </AntDesign.Select>
                            </div>
                        </div>
                    </div>
                }

                @if (context.EnabledFeatures.Contains(nameof(Post.Status)))
                {
                    <div class="">
                        <div class="spacer-2"></div>

                        <div class="statuses">
                            <div class="">
                                Статусы
                            </div>
                            <div class="card">
                                <div class="card-body small">
                                    <div class="st-item row mb-3 ">
                                        <div class="col-lg-4">Название</div>
                                        <div class="col-lg-4">slug</div>
                                        <div class="col-lg-4">
                                            <AntDesign.Button Size="small" OnClick=@(e=>context.PostStatusList.Add(new PostStatus()))>
                                                Добавить
                                            </AntDesign.Button>
                                            <AntDesign.Dropdown>
                                                <Overlay>
                                                    <Menu>
                                                        <MenuItem OnClick=@(e=>context.PostStatusList.AddRange(PostStatus.DefaultStatuses()))>
                                                            Добавить стандартные
                                                        </MenuItem>
                                                    </Menu>
                                                </Overlay>
                                                <ChildContent>
                                                    <a class="ant-dropdown-link fz14px ms-2" @onclick:preventDefault>
                                                        средства <Icon Type="down" />
                                                    </a>
                                                </ChildContent>
                                            </AntDesign.Dropdown>
                                        </div>
                                    </div>

                                    @foreach (var _st in context.PostStatusList)
                                    {
                                        var st = _st;
                                        <div class="st-item row mb-3">
                                            <div class="col-lg-4">
                                                <AntDesign.Input @bind-Value=@st.Title Size=@InputSize.Small />
                                            </div>
                                            <div class="col-lg-4">
                                                <AntDesign.Input @bind-Value=@st.Slug Size=@InputSize.Small />
                                            </div>
                                            <div class="col-lg-4">
                                                <DDeleteButton Type="text" Size="small" OnConfirm=@(e=>context.PostStatusList.Remove(st)) />
                                            </div>
                                        </div>
                                    }
                                    @if (context.PostStatusList.Count == 0)
                                    {
                                        <div class="text-secondary">
                                            &lt;нет строк&gt;
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (context.EnabledFeatures.Contains(nameof(Post.CategoryId)))
                {
                    <div class="d-category">
                        <div class="">
                            Категория
                        </div>

                        <DSelectGuidServ @bind-Value=@context.CategoryId
                                         LabelExpression=@(s=>s.Title)
                                         TService=PostCategoryService TModel=PostCategory />

                    </div>
                }

                <div class="card">
                    <div class="card-header">
                        Meta fields
                    </div>
                    <div class="card-body">
                        <div class="card-section">

                            @if (!context.MetaFields.Any())
                            {
                                <SharedContentNoRecords />
                            }

                            <CascadingValue Value="@context.MetaFields">
                                <CascadeStateChanger Context="h" OnStateChange="()=>StateHasChanged()">
                                    <CascadingValue Value="h">
                                        <AppFront.Shared.Components.MetaFieldViews.FormMetaField />
                                    </CascadingValue>
                                </CascadeStateChanger>
                            </CascadingValue>

                            <div class="mt-2">
                                <AntDesign.Button Icon="plus" OnClick="AddNewField">Добавить</AntDesign.Button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </ChildContent>
        <SectionExtraSidebar>

            <section class="editpost-taxonomy mb-3">
                <div class="card">
                    <div class="card-body">


                        <AntDesign.FormItem>
                            <AntDesign.Select Mode="tags"
                                              Placeholder="tags"
                                              @bind-Values="@context.SetTags"
                                              TItemValue="string"
                                              TItem="string"
                                              MaxTagCount="20"
                                              HideSelected
                                              EnableSearch=false
                                              Size="small">
                                <SelectOptions>
                                    @foreach (var _item in context.Tags)
                                    {
                                        <SelectOption TItemValue="string" TItem="string" Value=@_item Label=@_item />
                                    }
                                </SelectOptions>
                            </AntDesign.Select>
                        </AntDesign.FormItem>

                    </div>
                </div>
            </section>

            <div class="card">
                <div class="card-body">
                    <a href=@url target="_blank">
                        <AntDesign.Button Type="text">Export</AntDesign.Button>
                    </a>
                    <AntDesign.Button Type="text" OnClick="ShowImportModal">Import</AntDesign.Button>
                </div>
            </div>
        </SectionExtraSidebar>
    </StandartEditContainer>

</ContentWrapper>

<AntDesign.Modal Visible=visibleImportModal Footer="null" Title="Import" OnCancel="ImportModalOnCancel">
    <div>
        <InputFile OnChange="@LoadFiles" class="" />
        <AntDesign.TextArea @bind-Value=import_json />
        <div class="spacer-2"></div>
        <AntDesign.Button Type="@AntDesign.ButtonType.Primary" Icon="upload" Disabled=importButtonDisabled OnClick=OnImportClick>
            Импорт
        </AntDesign.Button>
    </div>
</AntDesign.Modal>

@code {
    [Parameter] public Guid ID { get; set; }
    StandartEditContainer<PostType, PostTypeService> f = default!;

    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] AppFront.Shared.Interfaces.IMessageService messageService { get; set; } = default!;
    [Inject] NavigationManager navigationManager { get; set; } = default!;
    [Inject] ViewModelService viewModelService { get; set; } = default!;
    MyJS js = default!;

    bool importButtonDisabled;
    string url = "";
    string import_json = "";
    bool visibleImportModal;

    [ValidateSourceUri]
    string _FormListSetter = "";
    [ValidateSourceUri]
    string _FormEditSetter = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        js = new MyJS(JSRuntime);

        url = Q.ServerUrlJoin($"/api/PostType/PostTypeExport/{ID}");
    }

    void AddNewField()
    {
        int order = f.Model.MetaFields.Any() ? f.Model.MetaFields.Max(s => s.Order) + 1 : 0;
        Guid parentId = Guid.Empty;
        f.Model.MetaFields.Add(FormMetaField.NewField(order, parentId));
    }

    void AfterSave(PostType postType)
    {
        _ = viewModelService.TryUpdateInitialSiteData(forceRemote: true, devAdminPageData: true);
    }

    void AfterDelete()
    {
        _ = viewModelService.TryUpdateInitialSiteData(forceRemote: true, devAdminPageData: true);
    }

    void ShowImportModal()
    {
        visibleImportModal = true;
    }

    void ImportModalOnCancel()
    {
        visibleImportModal = false;
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        importButtonDisabled = true;
        StateHasChanged();

        using MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        string json = System.Text.Encoding.UTF8.GetString(bytes);
        import_json = json;
        //importVal = JsonConvert.DeserializeObject<SystemImportSettingsFile_v1>(import_json);

        importButtonDisabled = false;
        StateHasChanged();

    }

    async void OnImportClick()
    {
        //importVal = JsonConvert.DeserializeObject<SystemImportSettingsFile_v1>(import_json);
        //var result = await viewModelService.SystemImportSettings(importVal);
        string asPostType = f!.Model.TypeName;
        var result = await f!.service.PostTypeImport(import_json, asPostType);

        if (result.Ok)
        {
            _ = messageService.Success(result.Message);
            _ = f!.Load();
        }
        else
        {
            _ = messageService.Error(result.Message);
        }
    }
}
