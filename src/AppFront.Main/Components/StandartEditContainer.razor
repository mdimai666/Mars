@using System.Linq.Expressions
@using Mars.Core.Exceptions
@using Mars.Shared.Contracts.Posts
@using Microsoft.FluentUI.AspNetCore.Components
@inject IStringLocalizer<AppRes> L

@typeparam TModel

<section class="@("StandartEditContainer " + Class)" style="@(Style)">
    <ErrorBoundary>
        <ChildContent>

            <div class="content-header d-flex align-items-center gap-3 mb-3">
                <DBackButton />
                <h4 class="fw-bold m-0">
                    @if (TitleText is null)
                    {
                        @(L[typeof(TModel).Name])
                    }
                    else
                    {
                        @TitleText
                    }
                </h4>
                <div class="ms-auto">
                    @if (SectionActions is not null)
                    {
                        @SectionActions(model)
                    }
                    else if (GeneralSectionActions is not null)
                    {
                        <DynamicComponent Type="GeneralSectionActions" />
                    }
                </div>
            </div>

            @* Model="@model" *@
            <EditForm EditContext="@_editContext"
                      @ref=_editForm
                      OnSubmit="@OnSubmit"
                      FormName="@($"edit-{ID}")"
                      novalidate>
                <ObjectGraphDataAnnotationsValidator />
                <div class="StandartEditContainer-main d-flex flex-column flex-lg-row flex-reverse">

                    @if (OperationError is not null)
                    {
                        <ExceptionMessage Exception="OperationError" />
                    }
                    else
                    {
                        <div class="edit-form flex-fill">
                            @if (IsBusy)
                            {
                                <SkeletonContent />
                                <div class="spacer-2"></div>
                                <SharedLoader1 />
                            }
                            else
                            {
                                <section class="StandartEditContainer-main__fields d-flex flex-column">
                                    <FluentMessageBar Title="@AppRes.ValidationErrorsOccurredTitle" Intent="@MessageIntent.Warning" Visible="_isInvalidState" Class="mb-3">
                                        <FluentValidationSummary />
                                    </FluentMessageBar>
                                    @ChildContent?.Invoke(model)
                                </section>
                            }
                        </div>
                        <aside class="mt-4 mt-lg-0 flex-shrink-0" style="width:300px;position: sticky;top: 60px;height: fit-content;">
                            <Affix OffsetTop="@(63+25)">
                                <div class="d-flex flex-column ms-0 ms-lg-3 gap-3">

                                    @if (IsBusy)
                                    {
                                        <div class="vstack gap-4">
                                            <FluentSkeleton Width="160px" Height="25px" Shimmer="true" />
                                            <div class="vstack gap-2">
                                                <FluentSkeleton Class="w-100" Height="16px;" Shimmer="true" />
                                                <FluentSkeleton Class="w-100" Height="16px;" Shimmer="true" />
                                            </div>
                                            <div class="">
                                                <FluentSkeleton Width="120px" Height="30px" Shimmer="true" Class="ms-auto" />
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="card" style="max-width:282px;">
                                            <div class="card-body">
                                                <h4 class="card-title">Публикация</h4>

                                                @if (!HideDatesSection)
                                                {
                                                    @if (!_addNewItem)
                                                    {
                                                        <h6 class="card-subtitle mb-2 text-muted">Создана: @model.CreatedAt.LocalDateTime.ToString("g")</h6>
                                                    }
                                                    else
                                                    {
                                                        <h6 class="card-subtitle mb-2 text-muted">Создание</h6>
                                                    }

                                                    @if (model.ModifiedAt != null)
                                                    {
                                                        <h6 class="card-subtitle mb-2 text-muted">Изменено: @model.ModifiedAt.Value.LocalDateTime.ToString("g")</h6>
                                                    }
                                                }

                                                @if (SectionSidePublish is not null)
                                                {
                                                    <div class="mt-3">
                                                        @SectionSidePublish(model)
                                                    </div>
                                                }

                                                <div class="mt-3 d-flex flex-nowrap justify-content-end gap-2">
                                                    <DFluentDeleteButton OnConfirm=OnDeleteClick Disabled=saveButtonBusy />

                                                    <FluentButton Appearance="Appearance.Accent" Loading="saveButtonBusy" Type="@ButtonType.Submit">
                                                        @AppRes.Save
                                                    </FluentButton>

                                                </div>
                                            </div>
                                        </div>

                                        <div class="SectionExtraSidebar">
                                            @SectionExtraSidebar?.Invoke(model)
                                        </div>
                                    }

                                </div>
                            </Affix>
                        </aside>
                    }
                </div>
            </EditForm>
        </ChildContent>
        <ErrorContent>
            <ExceptionMessage Exception="context" />
        </ErrorContent>
    </ErrorBoundary>
</section>
