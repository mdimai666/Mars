@using Mars.Shared.Contracts.Common
@using Mars.Shared.Contracts.Posts
@using Mars.Shared.Contracts.Search
@inject ILogger<GSearchContainer> _logger

@if (Visible)
{
    <section id="global_search_container" class="card white">
        <div class="d-search-content">

            @if (locals.Count == 0 && remotes.Count == 0)
            {
                <SharedContentNoRecords />
            }
            else
            {
                <div class="d-search-list-container ">
                    @foreach (var f in locals)
                    {
                        var item = f;

                        <a href="@f.Url" @onclick=@(e=>OnResultItemClick(item,e))>
                            <div class="d-search-item px-3 py-1">
                                <div class="text-accent h5 m-0 fw-normal">
                                    @((MarkupString)f.Title)
                                </div>
                                <div class="text-black">
                                    @((MarkupString)f.Description)
                                </div>
                            </div>
                        </a>
                    }

                    @if (IsBusy)
                    {
                        <SharedLoader2 />
                    }
                    else
                    {
                        @foreach (var f in remotes)
                        {
                            var item = f;

                            <a href="@f.Url" @onclick=@(e=>OnResultItemClick(item,e))>
                                <div class="d-search-item px-3 py-1">
                                    <div class="text-accent h5 m-0 fw-normal">
                                        @((MarkupString)f.Title)
                                    </div>
                                    <div class="text-black">
                                        @((MarkupString)f.Description)
                                    </div>
                                </div>
                            </a>
                        }
                    }
                </div>
            }
        </div>
        @*<JsonDump Model="list" />*@
    </section>
}


@code {
    List<LSearchFoundElement> locals { get; set; } = new();
    List<LSearchFoundElement> remotes { get; set; } = new();
    bool IsBusy = false;

    string _search = default!;

    [Parameter] public string Search { get => _search ?? ""; set { _search = value; Load(); } }

    [Parameter] public bool Visible { get; set; }

    [Inject] public ViewModelService vm { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //Load();
    }

    async void Load()
    {
        if (!Visible) return;
        locals = LocalItems();

        IsBusy = true;
        StateHasChanged();


        //locals.AddRange(new List<SearchFoundElement>(){
        //    new SearchFoundElement
        //    {
        //        Title = "Page doctor",
        //        Description = "Some description",
        //        Url = "/Personal",
        //        ModelName = nameof(ComponentBase)
        //    },
        //    new SearchFoundElement
        //    {
        //        Title = "Pacient Макаров Дмитрий" ,
        //        Description = "Диагноз Якутск",
        //        Id = Guid.NewGuid(),
        //        Url = $"/Pacient/Edit/{Guid.NewGuid()}",
        //        ModelName= nameof(Pacient)
        //    },
        //    new SearchFoundElement
        //    {
        //        Title = "Pacient Макаров Дмитрий" ,
        //        Description = "Диагноз Якутск",
        //        Id = Guid.NewGuid(),
        //        Url = $"/Pacient/Edit/{Guid.NewGuid()}",
        //        ModelName= nameof(Pacient)
        //    }
        //});

        //var ss = await vm.GlobalSearch("ка");
        try
        {
            if (Search.Length > 1)
            {
                var ss = await vm.GlobalSearch(Search);
                remotes = RemoteItems(ss.Select(s => new RSearchFoundElement(s)).ToList());
                Console.WriteLine("ss=" + ss.Count);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, ex.Message);
        }

        IsBusy = false;
        StateHasChanged();
    }

    void OnResultItemClick(object item, MouseEventArgs e)
    {
        Visible = false;
    }

    List<LSearchFoundElement> definedLocals = new()
    {
        //new LSearchFoundElement("1111111", "список статей", "/news", "Admin"),
        new LSearchFoundElement("Личный кабинет", "Личный кабинет, просмотр уведомлений", "/Personal"),
        new LSearchFoundElement("Профиль", "Просмотр и редактирование профиля", "/Profile"),
        new LSearchFoundElement("Настройки", "Настрокий сайта", "/dev/Settings", "Admin"),
        new LSearchFoundElement("Пациенты", "список пациентов", "/pacients", "Doctor,Admin"),
        new LSearchFoundElement("Статьи", "список статей", "/news", ""),
        new LSearchFoundElement("Управление статьями", "список пациентов", "/NewsManagement", "Admin"),
        new LSearchFoundElement("Управление пользователями", "список пользователей", "/Users", "Admin"),
        new LSearchFoundElement("Записать", "записать пациента на дату", "/Reception", ""),
        new LSearchFoundElement("Выйти", "выход из авторизованного аккаунта", "/Logout", ""),
    };

    List<LSearchFoundElement> LocalItems()
    {
        return definedLocals.Where(s => s.Contain(Search)).Take(4).Select(s => s.AsSearchMakedText(Search)).ToList();
    }

    List<LSearchFoundElement> RemoteItems(List<RSearchFoundElement> ss)
    {
        return ss.Select(s => new LSearchFoundElement(s.Title, s.Description, s.Url)
            {
                Id = s.Id,
                Title = s.Title,
                Description = s.Description,
                ModelName = s.ModelName,
                Url = UrlByModel(s)
            })
            .Select(s => s.AsSearchMakedText(Search))
            .ToList();
    }

    string UrlByModel(RSearchFoundElement s)
    {
        return s.ModelName switch
        {
            nameof(PostSummaryResponse) => $"/news/{s.Id}",
            //nameof(FaqPost) => $"/news/{s.Id}",
            _ => ""
        };
    }

    class RSearchFoundElement
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Url { get; set; }

        public string? ModelName { get; set; }
        public Guid Id { get; set; }

        public RSearchFoundElement(string title, string description, string url)
        {
            Title = title;
            Description = description;
            Url = url;
        }

        public RSearchFoundElement(SearchFoundElementResponse response)
        {
            Title = response.Title;
            Id = response.Id ?? Guid.Empty;
            Url = response.Url;
            ModelName = response.ModelName ?? "";
            Description = response.Description ?? "";
        }
    }

    class LSearchFoundElement : RSearchFoundElement
    {
        public string[]? Roles = null;

        public LSearchFoundElement(string title, string desc, string url, string? roles = null) : base(title, desc, url)
        {
            this.Title = title;
            this.Description = desc;
            this.Url = url;
            this.Roles = string.IsNullOrEmpty(roles) ? null : roles?.Split(',');
        }

        public bool Contain(string text)
        {
            if (string.IsNullOrEmpty(text) && Roles == null) return true;

            if (string.IsNullOrEmpty(text)) return inRole();

            return inRole() && (Title.Contains(text, StringComparison.OrdinalIgnoreCase)
            || Description.Contains(text, StringComparison.OrdinalIgnoreCase));
        }

        public LSearchFoundElement AsSearchMakedText(string text)
        {
            if (string.IsNullOrEmpty(text)) return this;

            return new LSearchFoundElement(
                    title: Title.Replace(text, $"<mark>{text.ToLower()}</mark>", StringComparison.OrdinalIgnoreCase),
                    desc: Description.Replace(text, $"<mark>{text.ToLower()}</mark>", StringComparison.OrdinalIgnoreCase),
                    url: Url
                );
        }

        bool inRole()
        {
            return Roles?.Any(s => !string.IsNullOrEmpty(s) && Q.User.Roles.Contains(s)) ?? true;
        }
    }
}

