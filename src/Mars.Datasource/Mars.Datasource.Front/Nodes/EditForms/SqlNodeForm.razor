@using Mars.Datasource.Core.Dto
@using Mars.Datasource.Core.Nodes
@using Mars.Datasource.Front.Services
@using Mars.Nodes.Core
@using Mars.Nodes.Core.Attributes
@using Mars.WebApiClient.Interfaces
@using BlazorMonaco.Editor
@using Microsoft.JSInterop
@using Mars.Nodes.FormEditor

@inherits NodeEditForm
@attribute [NodeEditFormForNode(typeof(SqlNode))]


<div class="form-group d-flex flex-column flex-fill">
    <label>SqlNode</label>
    @*<InputTextArea class="form-control flex-fill textarea-code f-on-tabpress-write-tab" @bind-Value=Node.Template />*@

    <div class="row mt-3">
        <div class="col">
            <label>datasource</label>
            <div class="dropdown">
                <a class="btn btn-light btn-sm rounded-0 dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-database-check"></i>
                    @Node.DatasourceSlug
                </a>
                <ul class="dropdown-menu rounded-0 shadow fz14px">
                    @foreach (var _a in listDatasources)
                    {
                        var a = _a;
                        if (a.Slug == Node.DatasourceSlug) continue;
                        <li><a class="dropdown-item" @onclick=@(e=>Node.DatasourceSlug = a.Slug) >@a.Title</a></li>
                    }
                    @if (listDatasources.Count > 1)
                    {
                        <li><hr class="dropdown-divider"></li>
                    }
                    <li><a class="dropdown-item" href="datasource/config"><i class="bi bi-gear"></i> Настроить</a></li>
                </ul>
            </div>
        </div>
        <div class="col">
            <label>input source</label>
            <Microsoft.AspNetCore.Components.Forms.InputSelect @bind-Value=@Node.Source class="form-select form-select-sm">
                @foreach (var m in Enum.GetValues(typeof(SqlNode.ESqlNodeInputSource)))
                {
                    <option value="@((SqlNode.ESqlNodeInputSource)m)">@m</option>
                }
            </Microsoft.AspNetCore.Components.Forms.InputSelect>
        </div>
    </div>


    @if (Node.Source == SqlNode.ESqlNodeInputSource.Static)
    {
        <div class="d-flex mt-3" style="height:50vh">
            <BlazorMonaco.Editor.StandaloneCodeEditor @ref="editor1"
                                                      CssClass="flex-fill"
                                                      OnDidInit="EditorOnDidInit"
                                                      ConstructionOptions="EditorConstructionOptions" />

        </div>
    }

    <div class="mt-3">
        <label>output type</label>
        <Microsoft.AspNetCore.Components.Forms.InputSelect @bind-Value=@Node.OutputType class="form-select">
            @foreach (var m in Enum.GetValues(typeof(SqlNode.ESqlNodeOutputType)))
            {
                <option value="@((SqlNode.ESqlNodeOutputType)m)">@m</option>
            }
        </Microsoft.AspNetCore.Components.Forms.InputSelect>
    </div>


</div>


@code {
    [CascadingParameter] Node? Value { get; set; }
    SqlNode Node { get => (SqlNode)Value!; set => Value = value; }

    [Inject]
    IDatasourceServiceClient service { get; set; } = default!;

    BlazorMonaco.Editor.StandaloneCodeEditor? editor1 = default!;

    [Inject]
    IJSRuntime jsRuntime { get; set; } = default!;

    NodeFormEditorJsInterop js = default!;

    IReadOnlyCollection<SelectDatasourceDto> listDatasources = new List<SelectDatasourceDto>();


    protected override void OnInitialized()
    {
        base.OnInitialized();
        js = new NodeFormEditorJsInterop(jsRuntime);

        _ = Task.Run(async () =>
        {
            listDatasources = await service.ListSelectDatasource();
            StateHasChanged();
        });
    }


    public override async Task OnEditSave()
    {
        //Console.WriteLine("X>1111");
        Node.SqlQuery = await editor1!.GetValue();
        //Console.WriteLine("X>2222");
        //await Task.Delay(100);
    }


    void OnEditorSave(string val)
    {
        //_ = form.OnFinish();
    }

    private async Task EditorOnDidInit()
    {
        await Mars.Nodes.FormEditor.EditForms.FunctionNodeForm.EditorOnDidInit(editor1!, js, NodeEditContainer);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {

        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "sql",
                Value = Node.SqlQuery,
            };
    }
}

