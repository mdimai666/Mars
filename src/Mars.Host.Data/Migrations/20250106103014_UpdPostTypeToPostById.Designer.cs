// <auto-generated />
using System;
using System.Collections.Generic;
using Mars.Host.Data.Contexts;
using Mars.Host.Data.OwnedTypes.Files;
using Mars.Host.Data.OwnedTypes.MetaFields;
using Mars.Host.Data.OwnedTypes.NavMenus;
using Mars.Host.Data.OwnedTypes.PostTypes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mars.Host.Data.Migrations
{
    [DbContext(typeof(MarsDbContext))]
    [Migration("20250106103014_UpdPostTypeToPostById")]
    partial class UpdPostTypeToPostById
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Mars.Host.Data.Entities.FeedbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<Guid?>("AuthorizedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorized_user_id");

                    b.Property<string>("Content")
                        .HasMaxLength(256)
                        .HasColumnType("text")
                        .HasColumnName("content")
                        .HasComment("Текст");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email")
                        .HasComment("Email");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("integer")
                        .HasColumnName("feedback_type")
                        .HasComment("Тип обратной связи");

                    b.Property<string>("FilledUsername")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("filled_username")
                        .HasComment("Заполненное имя");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<string>("Phone")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("phone")
                        .HasComment("Телефон");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text")
                        .HasColumnName("title")
                        .HasComment("Название");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("AuthorizedUserId")
                        .HasDatabaseName("ix_feedbacks_authorized_user_id");

                    b.ToTable("feedbacks", null, t =>
                        {
                            t.HasComment("Обратная связь");
                        });
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<string>("FileExt")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("file_ext")
                        .HasComment("Расширение файла. Без ведущей точки.");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("file_name")
                        .HasComment("Имя файла");

                    b.Property<string>("FilePhysicalPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("text")
                        .HasColumnName("file_physical_path")
                        .HasComment("Физический путь файла от upload");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("file_size")
                        .HasComment("Размер файла в байтах");

                    b.Property<string>("FileVirtualPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("text")
                        .HasColumnName("file_virtual_path")
                        .HasComment("Виртуальный путь файла");

                    b.Property<FileEntityMeta>("Meta")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("meta")
                        .HasComment("Мета поля");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("ИД пользователя");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_files_user_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.MetaFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("Описание");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled")
                        .HasComment("Отключен");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("hidden")
                        .HasComment("Скрытое");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nullable")
                        .HasComment("IsNullable");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("key")
                        .HasComment("Key");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value")
                        .HasComment("Максимальное");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("numeric")
                        .HasColumnName("min_value")
                        .HasComment("Минимальное");

                    b.Property<string>("ModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("model_name")
                        .HasComment("Модель");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order")
                        .HasComment("Порядок");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id")
                        .HasComment("Родительское мета поле");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("tags")
                        .HasComment("Теги");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title")
                        .HasComment("Название");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type")
                        .HasComment("Тип");

                    b.Property<List<MetaFieldVariant>>("Variants")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("variants")
                        .HasComment("Варианты");

                    b.HasKey("Id")
                        .HasName("pk_meta_fields");

                    b.ToTable("meta_fields", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.MetaValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<bool>("Bool")
                        .HasColumnType("boolean")
                        .HasColumnName("bool");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<decimal>("Decimal")
                        .HasColumnType("numeric")
                        .HasColumnName("decimal");

                    b.Property<float>("Float")
                        .HasColumnType("real")
                        .HasColumnName("float");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int>("Int")
                        .HasColumnType("integer")
                        .HasColumnName("int");

                    b.Property<long>("Long")
                        .HasColumnType("bigint")
                        .HasColumnName("long");

                    b.Property<Guid>("MetaFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("meta_field_id");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<bool>("NULL")
                        .HasColumnType("boolean")
                        .HasColumnName("null");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("StringShort")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("string_short");

                    b.Property<string>("StringText")
                        .HasColumnType("text")
                        .HasColumnName("string_text");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variant_id");

                    b.Property<Guid[]>("VariantsIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("variants_ids");

                    b.HasKey("Id")
                        .HasName("pk_meta_values");

                    b.HasIndex("MetaFieldId")
                        .HasDatabaseName("ix_meta_values_meta_field_id");

                    b.ToTable("meta_values", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.NavMenuEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("class")
                        .HasComment("Class");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Создан");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled")
                        .HasComment("Отключен");

                    b.Property<List<NavMenuItem>>("MenuItems")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("menu_items")
                        .HasComment("Элементы");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<List<string>>("Roles")
                        .IsRequired()
                        .HasColumnType("varchar(128)[]")
                        .HasColumnName("roles")
                        .HasComment("Роли");

                    b.Property<bool>("RolesInverse")
                        .HasColumnType("boolean")
                        .HasColumnName("roles_inverse")
                        .HasComment("Не для ролей");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("slug")
                        .HasComment("slug");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("style")
                        .HasComment("Style");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("varchar(128)[]")
                        .HasColumnName("tags")
                        .HasComment("Теги");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("title")
                        .HasComment("Название");

                    b.HasKey("Id")
                        .HasName("pk_nav_menus");

                    b.ToTable("nav_menus", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.OptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_options");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_options_key");

                    b.ToTable("options", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content")
                        .HasComment("Текст");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Удален в");

                    b.Property<string>("Excerpt")
                        .HasMaxLength(512)
                        .HasColumnType("text")
                        .HasColumnName("excerpt")
                        .HasComment("Отрывок");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("lang_code")
                        .HasComment("Язык");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<Guid>("PostTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_type_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("slug")
                        .HasComment("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("tags")
                        .HasComment("Теги");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("text")
                        .HasColumnName("title")
                        .HasComment("Название");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("ИД пользователя");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("PostTypeId")
                        .HasDatabaseName("ix_posts_post_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostFilesEntity", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("FileEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_entity_id");

                    b.HasKey("PostId", "FileEntityId")
                        .HasName("pk_post_files_entity");

                    b.HasIndex("FileEntityId")
                        .HasDatabaseName("ix_post_files_entity_file_entity_id");

                    b.ToTable("post_files_entity", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostMetaValueEntity", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("MetaValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("meta_value_id");

                    b.HasKey("PostId", "MetaValueId")
                        .HasName("pk_post_meta_values");

                    b.HasIndex("MetaValueId")
                        .HasDatabaseName("ix_post_meta_values_meta_value_id");

                    b.ToTable("post_meta_values", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("ИД");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()")
                        .HasComment("Создан");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled")
                        .HasComment("Отключен");

                    b.Property<List<string>>("EnabledFeatures")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("enabled_features")
                        .HasComment("Функции");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasComment("Изменен");

                    b.Property<PostContentSettings>("PostContentType")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("post_content_type")
                        .HasComment("Настройки контента");

                    b.Property<List<PostStatusEntity>>("PostStatusList")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("post_status_list")
                        .HasComment("Статусы");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("character varying(128)[]")
                        .HasColumnName("tags")
                        .HasComment("Теги");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("text")
                        .HasColumnName("title")
                        .HasComment("Название");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("type_name")
                        .HasComment("Тип");

                    b.HasKey("Id")
                        .HasName("pk_post_types");

                    b.HasIndex("TypeName")
                        .HasDatabaseName("ix_post_types_type_name")
                        .HasFilter("\"disabled\" IS true");

                    b.ToTable("post_types", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostTypeMetaFieldEntity", b =>
                {
                    b.Property<Guid>("PostTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_type_id");

                    b.Property<Guid>("MetaFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("meta_field_id");

                    b.HasKey("PostTypeId", "MetaFieldId")
                        .HasName("pk_post_type_meta_fields");

                    b.HasIndex("MetaFieldId")
                        .HasDatabaseName("ix_post_type_meta_fields_meta_field_id");

                    b.ToTable("post_type_meta_fields", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.RoleClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth_date")
                        .HasComment("День рождения");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("first_name")
                        .HasComment("Имя");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender")
                        .HasComment("Пол");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("last_name")
                        .HasComment("Фамилия");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("middle_name")
                        .HasComment("Отчество");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("security_stamp");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserLoginEntity", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserMetaFieldEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("MetaFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("meta_field_id");

                    b.HasKey("UserId", "MetaFieldId")
                        .HasName("pk_user_meta_fields");

                    b.HasIndex("MetaFieldId")
                        .HasDatabaseName("ix_user_meta_fields_meta_field_id");

                    b.ToTable("user_meta_fields", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserMetaValueEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("MetaValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("meta_value_id");

                    b.HasKey("UserId", "MetaValueId")
                        .HasName("pk_user_meta_values");

                    b.HasIndex("MetaValueId")
                        .HasDatabaseName("ix_user_meta_values_meta_value_id");

                    b.ToTable("user_meta_values", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserTokenEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.FeedbackEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "AuthorizedUser")
                        .WithMany()
                        .HasForeignKey("AuthorizedUserId")
                        .HasConstraintName("fk_feedbacks_users_authorized_user_id");

                    b.Navigation("AuthorizedUser");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.FileEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_files_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.MetaValueEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.MetaFieldEntity", "MetaField")
                        .WithMany("MetaValues")
                        .HasForeignKey("MetaFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meta_values_meta_fields_meta_field_id");

                    b.Navigation("MetaField");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.PostTypeEntity", "PostType")
                        .WithMany()
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_post_types_post_type_id");

                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostFilesEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.FileEntity", "FileEntity")
                        .WithMany("PostFiles")
                        .HasForeignKey("FileEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_files_entity_files_file_entity_id");

                    b.HasOne("Mars.Host.Data.Entities.PostEntity", "Post")
                        .WithMany("PostFiles")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_files_entity_posts_post_id");

                    b.Navigation("FileEntity");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostMetaValueEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.MetaValueEntity", "MetaValue")
                        .WithMany("PostMetaValues")
                        .HasForeignKey("MetaValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_meta_values_meta_values_meta_value_id");

                    b.HasOne("Mars.Host.Data.Entities.PostEntity", "Post")
                        .WithMany("PostMetaValues")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_meta_values_posts_post_id");

                    b.Navigation("MetaValue");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostTypeMetaFieldEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.MetaFieldEntity", "MetaField")
                        .WithMany("PostTypeMetaFields")
                        .HasForeignKey("MetaFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_type_meta_fields_meta_fields_meta_field_id");

                    b.HasOne("Mars.Host.Data.Entities.PostTypeEntity", "PostType")
                        .WithMany("PostTypeMetaFields")
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_type_meta_fields_post_types_post_type_id");

                    b.Navigation("MetaField");

                    b.Navigation("PostType");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.RoleClaimEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.RoleEntity", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserClaimEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserLoginEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserMetaFieldEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.MetaFieldEntity", "MetaField")
                        .WithMany("UserMetaFields")
                        .HasForeignKey("MetaFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meta_fields_meta_fields_meta_field_id");

                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("UserMetaFields")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meta_fields_users_user_id");

                    b.Navigation("MetaField");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserMetaValueEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.MetaValueEntity", "MetaValue")
                        .WithMany("UserMetaValues")
                        .HasForeignKey("MetaValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meta_values_meta_values_meta_value_id");

                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("UserMetaValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meta_values_users_user_id");

                    b.Navigation("MetaValue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserTokenEntity", b =>
                {
                    b.HasOne("Mars.Host.Data.Entities.UserEntity", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.FileEntity", b =>
                {
                    b.Navigation("PostFiles");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.MetaFieldEntity", b =>
                {
                    b.Navigation("MetaValues");

                    b.Navigation("PostTypeMetaFields");

                    b.Navigation("UserMetaFields");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.MetaValueEntity", b =>
                {
                    b.Navigation("PostMetaValues");

                    b.Navigation("UserMetaValues");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostEntity", b =>
                {
                    b.Navigation("PostFiles");

                    b.Navigation("PostMetaValues");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.PostTypeEntity", b =>
                {
                    b.Navigation("PostTypeMetaFields");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.RoleEntity", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Mars.Host.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Files");

                    b.Navigation("Logins");

                    b.Navigation("Posts");

                    b.Navigation("Tokens");

                    b.Navigation("UserMetaFields");

                    b.Navigation("UserMetaValues");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
