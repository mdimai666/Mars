using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using AppShared.Models;
using Mars.Host.Shared.Interfaces;
using Mars.Host.Shared.Services;
using Mars.Host.Shared.Templators;

namespace Mars.GenSourceCode;

public class GenClassMto
{

    public static string GenPostTypesAsMtoString(List<PostType> postTypeList, List<MetaField> userMetaFields, IMetaModelTypesLocator mlocator, string setNamespace = "AppFront.Host.Data", bool addNamespace = true)
    {
        //using var ef = _serviceProvider.GetService<MarsDbContext>();

        //string postTypeName = "testPost";

        //var postTypeList = ef.PostTypes
        //                        .Include(s => s.MetaFields)
        //                        //.First(s => s.TypeName == postTypeName);
        //                        .ToList();

        StringBuilder sb = new();

        //Type tt = typeof(PostDto);

        string _namespace = setNamespace;

        List<MtoClassInfoPost> postTypeMtoListInfos = new();
        List<DtoClassInfoPost> postTypeDtoListInfos = new();

        foreach (var postType in postTypeList)
        {
            MtoClassInfoPost mto = new MtoClassInfoPost(postType, mlocator);
            postTypeMtoListInfos.Add(mto);

            DtoClassInfoPost dto = new DtoClassInfoPost(postType, mlocator);
            postTypeDtoListInfos.Add(dto);
        }


        sb.AppendLine("#nullable enable");
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("// Date = " + DateTime.Now);
        sb.AppendLine("// don't change here. For expand use \"partial class\"");
        sb.AppendLine("");

        var namespaces = postTypeMtoListInfos.SelectMany(s => s.namespaces)
                        .Concat(new string[] {
                            typeof(int).Namespace!,
                            typeof(List<>).Namespace!,
                            typeof(DisplayAttribute).Namespace!,
                            typeof(Post).Namespace!,
                            typeof(System.Linq.Expressions.Expression).Namespace!,
                            typeof(IDtoMarker).Namespace!,
                            typeof(MetaRelationObjectDict).Namespace!
                        })
                        .Distinct();

        foreach (var ns in namespaces)
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine("\n");

        if (addNamespace)
        {
            sb.AppendLine($"namespace {_namespace};");
        }

        sb.AppendLine("\n");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("// POST Mto types");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("\n");

        foreach (var postTypeInfo in postTypeMtoListInfos)
        {
            postTypeInfo.WriteTo(sb, false);

            sb.AppendLine();
            sb.AppendLine();
            postTypeInfo.WriteSelectExpression(sb);
            sb.AppendLine("}");
            sb.AppendLine();
        }

        sb.AppendLine("\n");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("// POST Dto types");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("\n");

        foreach (var postTypeInfo in postTypeDtoListInfos)
        {
            postTypeInfo.WriteTo(sb, false);

            sb.AppendLine();
            sb.AppendLine();
            postTypeInfo.WriteSelectExpression(sb);
            sb.AppendLine();
            sb.AppendLine();
            postTypeInfo.WriteRelationFieldsInfo(sb);
            sb.AppendLine("}");
            sb.AppendLine();
        }

        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("// USER types");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("\n");

        List<MtoClassInfoUser> userTypeListInfos = new();
        MtoClassInfoUser ciUser = new MtoClassInfoUser(userMetaFields, mlocator);
        userTypeListInfos.Add(ciUser);

        foreach (var userTypeInfo in userTypeListInfos)
        {
            userTypeInfo.WriteTo(sb, false);

            sb.AppendLine();
            sb.AppendLine();
            userTypeInfo.WriteSelectExpression(sb);
            sb.AppendLine("}");
            sb.AppendLine();
        }


        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("// MetaField Group types");
        sb.AppendLine("// -----------------------------------------------");
        sb.AppendLine("\n");

        List<MetaField> groupFields = new();
        List<MetaFieldGroupClassInfo> groupFieldsListInfos = new();

        foreach (var postType in postTypeList)
        {
            foreach (var mf in postType.MetaFields.Where(s => s.Type == EMetaFieldType.Group))
            {
                groupFields.Add(mf);
                var group = new MetaFieldGroupClassInfo(postType, mf, mlocator);
                groupFieldsListInfos.Add(group);
            }
        }

        foreach (var groupTypeInfo in groupFieldsListInfos)
        {
            groupTypeInfo.WriteTo(sb, false);

            sb.AppendLine();
            sb.AppendLine();
            groupTypeInfo.WriteSelectExpression(sb);
            //sb.AppendLine();
            //sb.AppendLine();
            //groupTypeInfo.WriteRelationFieldsInfo(sb);
            sb.AppendLine("}");
            sb.AppendLine();
        }


        string result = sb.ToString();

        return result;
    }

    List<string> TypeFieldsAsSourceCode(Type type)
    {
        PropertyInfo[] props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p => p.CanRead && p.CanWrite).ToArray();

        List<string> result = new List<string>();

        foreach (var prop in props)
        {
            string typeName = GetFriendlyTypeName(prop.PropertyType.Name);
            if (prop.PropertyType.IsGenericType)
            {
                typeName = GetFormattedName(prop.PropertyType);
            }
            result.Add($"\tpublic {typeName} {prop.Name} {{get; set; }}");
        }

        return result;
    }

    internal static List<MtFieldInfo> PostTypeAsMtoClassSourceCode(PostType postType, IMetaModelTypesLocator mlocator, Guid MetaFieldParentId)
    {
        List<MtFieldInfo> result = new();

        foreach (var metaField in postType.MetaFields.Where(s => s.ParentId == MetaFieldParentId))
        {
            if (metaField.TypeParentable) continue; //ignore parentable 

            if (metaField.Disable) continue;


            MtFieldInfo tt = new MtFieldInfo(metaField, mlocator);

            result.Add(tt);
        }

        return result;

    }
    
    internal static List<DtFieldInfo> PostTypeAsDtoClassSourceCode(PostType postType, IMetaModelTypesLocator mlocator)
    {
        List<DtFieldInfo> result = new();

        foreach (var metaField in postType.MetaFields.Where(s => s.ParentId == Guid.Empty))
        {
            if (metaField.TypeParentable) continue; //ignore parentable 

            if (metaField.Disable) continue;


            DtFieldInfo tt = new DtFieldInfo(metaField, mlocator);

            result.Add(tt);
        }

        return result;

    }



    public static string GetFormattedName(Type type)
    {
        if (type.IsGenericType)
        {
            string genericArguments = type.GetGenericArguments()
                                .Select(x => GetFriendlyTypeName(x.Name))
                                .Aggregate((x1, x2) => $"{x1}, {x2}");
            return $"{type.Name.Substring(0, type.Name.IndexOf("`"))}"
                 + $"<{genericArguments}>";
        }
        return type.Name;
    }

    public static string GetFriendlyTypeName(string typeName)
    {
        return typeName switch
        {
            "Object" => "object",
            "String" => "string",
            "Boolean" => "bool",
            "Byte" => "byte",
            "Char" => "char",
            "Decimal" => "decimal",
            "Double" => "double",
            "Int16" => "short",
            "Int32" => "int",
            "Int64" => "long",
            "SByte" => "sbyte",
            "Single" => "float",
            "UInt16" => "ushort",
            "UInt32" => "uint",
            "UInt64" => "ulong",
            "Void" => "void",
            _ => typeName
        };
    }


}
