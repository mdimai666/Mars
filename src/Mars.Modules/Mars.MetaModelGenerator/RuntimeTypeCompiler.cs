using System.ComponentModel.DataAnnotations;
using System.Text;
using Mars.Core.Extensions;
using Mars.Host.Data.Contexts;
using Mars.Host.Data.Entities;
using Mars.Host.Data.OwnedTypes.MetaFields;
using Mars.Host.Shared.Interfaces;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;
using Microsoft.EntityFrameworkCore;

namespace Mars.MetaModelGenerator;

/// <summary>
/// Компилирует классы с MetaField в Type(class) чтобы через них можно было делать запросы в ef.
/// </summary>
public class RuntimeMetaTypeCompiler
{
    private (string fullcode, string[] namespaces, Type[] usingTypes, MetaTypeResultItem[] metaTypeItems)
        PrepareData(MetaTypeInfo[] entityWithMetaFields, IReadOnlyDictionary<string, MetaModelResolveTypeInfo>? metaModelTypesResolverDict, bool useNamespace = true)
    {
        var _namespace = "AppFront.Host.Data";

        var master = new GenSourceCodeMaster();

        var metaTypeItems = new List<MetaTypeResultItem>(entityWithMetaFields.Length);

        foreach (var entity in entityWithMetaFields)
        {
            var code = master.Generate(entity.NewClassName, entity.BaseEntityType, entity.MetaFields, entity.DisplayAttribute, metaModelTypesResolverDict);
            metaTypeItems.Add(new MetaTypeResultItem(entity, code));
        }

        var sb = new StringBuilder();
        AddHeader(sb);

        Type[] usingTypes = [typeof(int),
                            typeof(List<>)!,
                            typeof(DisplayAttribute),
                            typeof(System.Linq.Expressions.Expression),
                            //typeof(EntityFrameworkQueryableExtensions),
                            typeof(MetaValueEntity),
                            typeof(MetaFieldEntity),
                            typeof(IDtoMarker),
                            typeof(MetaFieldVariant),
                            ..entityWithMetaFields.Select(s=>s.BaseEntityType)
                            ];

        var namespaces = ((string[])[
            "System.Linq",
            "System.Text",
            "System.Collections.Generic",
            "System.Threading.Tasks",
            ..usingTypes.Select(s => s.Namespace!).TrimNulls()
            ]).Distinct().Order().ToArray();

        foreach (var ns in namespaces)
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine();
        if (useNamespace) sb.AppendLine($"namespace {_namespace};");
        sb.AppendLine();

        foreach (var item in metaTypeItems)
        {
            sb.AppendLine(item.code);
            sb.AppendLine();
        }

        return (sb.ToString(), namespaces, usingTypes, metaTypeItems.ToArray());
    }

    public string GenerateFullSourceCode(MetaTypeInfo[] entityWithMetaFields, IReadOnlyDictionary<string, MetaModelResolveTypeInfo>? metaModelTypesResolverDict, bool useNamespace = true)
    {
        return PrepareData(entityWithMetaFields, metaModelTypesResolverDict, useNamespace: useNamespace).fullcode;
    }

    public async Task<Dictionary<string, Type>> Compile(MetaTypeInfo[] entityWithMetaFields, IReadOnlyDictionary<string, MetaModelResolveTypeInfo>? metaModelTypesResolverDict)
    {
        var (fullcode, namespaces, usingTypes, metaTypeItems) = PrepareData(entityWithMetaFields, metaModelTypesResolverDict, useNamespace: false);

        ScriptOptions scriptOptions = ScriptOptions.Default
                .WithImports(namespaces)
                .WithReferences([
                    ..usingTypes.Select(s=>s.Assembly),
                    typeof(MarsDbContext).Assembly,
                    typeof(EntityFrameworkQueryableExtensions).Assembly,
                    ]
                );

        var script = $$"""
            {{fullcode}}

            return new Dictionary<string, Type>
            {
                {{metaTypeItems.Select(s => $"{{ \"{s.MetaTypeInfo.NewClassName}\", typeof({s.MetaTypeInfo.NewClassName})}}").JoinStr(",")}}
            };
            """;

        //Dictionary<Type, Type> a = new Dictionary<Type, Type> { { typeof(int), typeof(int) } };

        var compiled = CSharpScript.Create<Dictionary<string, Type>>(script, scriptOptions).CreateDelegate();

        var result = await compiled();
        return result;
    }

    void AddHeader(StringBuilder sb)
    {
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("// Date = " + DateTime.Now);
        sb.AppendLine("// don't change here. For expand use \"partial class\"");
        sb.AppendLine("");
    }
}

public record MetaTypeInfo(string NewClassName, Type BaseEntityType, MetaFieldEntity[] MetaFields, DisplayAttribute DisplayAttribute);

public record MetaTypeResultItem(MetaTypeInfo MetaTypeInfo, string code);
