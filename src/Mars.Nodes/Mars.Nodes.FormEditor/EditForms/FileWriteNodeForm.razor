@using AppFront.Shared.Components
@using Microsoft.FluentUI.AspNetCore.Components
@inherits NodeEditForm
@attribute [NodeEditFormForNode(typeof(FileWriteNode))]

<div class="vstack gap-3">
    <FormItem2 For="() => Node.FilePath" Class="">
        <FluentTextField @bind-Value="@Node.FilePath" Class="w-100" />
    </FormItem2>

    <FormItem2 For=@(() => Node.WriteMode)>
        <FluentSelect @bind-SelectedOption="@Node.WriteMode"
                      TOption="FileWriteNode.FileWriteMode"
                      Items="Enum.GetValues<FileWriteNode.FileWriteMode>()"
                      Style="width: 250px;">
        </FluentSelect>
    </FormItem2>

    @if (Node.WriteMode != FileWriteNode.FileWriteMode.Delete)
    {
        <FluentCheckbox @bind-Value=@Node.AddAsNewLine Class="">
            <AutoInputLabel For="() => Node.AddAsNewLine" />
        </FluentCheckbox>

        <FluentCheckbox @bind-Value=@Node.CreateDirectoryIfItDoesntExist Class="">
            <AutoInputLabel For="() => Node.CreateDirectoryIfItDoesntExist" />
        </FluentCheckbox>

    }
</div>

@code {
    [CascadingParameter] Node Value { get; set; } = default!;
    FileWriteNode Node { get => (FileWriteNode)Value; set => Value = value; }

}
