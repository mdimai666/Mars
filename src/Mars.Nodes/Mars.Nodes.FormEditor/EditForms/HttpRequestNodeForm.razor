@using AppFront.Shared.Components
@using Mars.Core.Utils
@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@inherits NodeEditForm
@attribute [NodeEditFormForNode(typeof(HttpRequestNode))]

<div class="form-group compact" style="--fluent-input-label-basis:150px">
    <div class="vstack gap-2">
        <FormItem2 For="()=>Node.Url">
            <FluentTextField TextFieldType="TextFieldType.Url" @bind-Value=@Node.Url Appearance="FluentInputAppearance.Filled" Class="flex-fill" />
        </FormItem2>
        <FormItem2 For="()=>Node.Method">
            <FluentSelect TOption="string"
                          Items="Node.MethodVariants"
                          Appearance="Appearance.Stealth"
                          @bind-SelectedOption=@Node.Method />
        </FormItem2>

        <div class="spacer-1"></div>

        <div>
            <AutoInputLabel For="()=>Node.Headers" />
            <FluentSortableList Id="dragHandles" Handle="true" Items="Node.Headers" OnUpdate="@SortList" Context="item">
                <ItemTemplate>
                    <div class="sortable-grab">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
                    </div>
                    <div class="sortable-item-content p-1" style="flex-grow: 1;" @key=item>
                        <div class="hstack">
                            <FluentTextField @bind-Value=item.Name Placeholder="Key" />
                            <FluentTextField @bind-Value=item.Value Placeholder="Value" />
                            <FluentButton OnClick=@(()=>DeleteItem(item)) IconStart="@(new Icons.Regular.Size16.Delete())" />
                        </div>
                    </div>
                </ItemTemplate>
            </FluentSortableList>
            <div class="mt-1">
                <FluentButton OnClick="AddNew" IconStart="@(new Icons.Regular.Size16.Add())">Add</FluentButton>
            </div>
        </div>

    </div>
</div>

@code {
    [CascadingParameter] Node Value { get; set; } = default!;
    HttpRequestNode Node { get => (HttpRequestNode)Value; set => Value = value; }

    void SortList(FluentSortableListEventArgs args) => Node.Headers = Node.Headers.MoveItem(args.OldIndex, args.NewIndex);

    void AddNew()
    {
        Node.Headers = [.. Node.Headers, new()];
    }

    void DeleteItem(HeaderItem item)
    {
        Node.Headers = Node.Headers.Where(s => s.Equals(item)).ToArray();
    }
}
