@using AppFront.Shared.Services
@using Mars.Nodes.Core
@using Microsoft.AspNetCore.Components.Forms;
@using Mars.Nodes.Core.Nodes
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.JSInterop
@using NodeFormEditor.EditForms


<div class="NodeFormEditor1 h-100">

    <EditForm @ref=EditForm Model="@Node" Context="model" class="h-100 d-flex flex-column"
                @onkeydown="KeyDown"
                OnValidSubmit="ValidSubmit">
        <div class="text-secondary">
            <div>
                <span>id: </span>
                <span>@Node.Id</span>
                @* etype: @(NodeEditFormType?.FullName ?? "null") *@
                @if (AppFront.Shared.Q.Dev)
                {
                    <div class="vr mx-3"></div>
                    <a role="button" class="" @onclick="OpenFormSourceCode">
                        code
                        <i class="bi bi-box-arrow-up-right"></i>
                    </a>
                }
            </div>
        </div>

        <div>
            <ObjectGraphDataAnnotationsValidator />
            <FluentValidationSummary />
        </div>

        <p>
            @* <label>name: (@Node.GetType().FullName)</label> *@
            <label>name</label>
            <InputText class="form-control" @bind-Value=Node.Name placeholder="@Node.Label" />
        </p>

        <div class="flex-fill d-flex flex-column">
            @if (NodeEditFormType is null)
            {
                <div>
                    <div class="alert alert-warning">NodeEditFormType not implement</div>
                </div>
            }
            else
            {
                <CascadingValue Value="@Node">
                    <DynamicComponent Type="@NodeEditFormType" @ref=dynCmp />
                </CascadingValue>
                @*@ChildContent?.Invoke(Node)*@
            }
        </div>

        <div class="BOTTOM card border-0 mt-3" style="background-color:#ddd">
            <div class="card-body d-flex gap-2 py-0">
                <InputCheckbox @bind-Value=Node.Disabled name="@nameof(Node.Disabled)" id="@nameof(Node.Disabled)" />
                <label class="user-select-none" for="@(nameof(Node.Disabled))">Disabled</label>
            </div>
        </div>


        <div class="d-none">
            <p>===========another-tab=============</p>
            <p>description</p>
            <p>show_label</p>
            <p>icon</p>
            <p>port labels: --</p>
        </div>

    </EditForm>

</div>

@code {
    [Inject] IJSRuntime JS { get; set; } = default!;
    NodeFormEditorJsInterop js = default!;

    [Inject] DeveloperControlService developerControlService { get; set; } = default!;

    public EditForm? EditForm = default!;

    Node _node = new();

#pragma warning disable BL0007

    [Parameter]
    public Node Node
    {
        get => _node;
        set
        {
            if (value == _node) return;
            _node = value;
            if (_node != null)
            {
                UpdateEditFormType();
                Console.WriteLine($"EditStart Node={_node.DisplayName}, Type={Node.Type}, Form={NodeEditFormType?.Name}");
            }
            NodeChanged.InvokeAsync(_node);
        }
    }
#pragma warning restore CS0162


    [Parameter] public EventCallback<Node> NodeChanged { get; set; }

    [Parameter] public EventCallback OnValidSubmit { get; set; }

    //[Parameter] public RenderFragment<Node>? ChildContent { get; set; }

    Type? NodeEditFormType { get; set; }

    //private MonacoEditor? _editor { get; set; }

    //bool node_enabled = true;



    protected override void OnInitialized()
    {
        base.OnInitialized();
        js = new(JS);
    }

    void UpdateEditFormType()
    {
        NodeEditFormType = NodeFormsLocator.TryGetForNodeType(Node.GetType());

    }

    public Type? GetCurrentNodeEditFormType()
    {
        return NodeEditFormType;
    }

    DynamicComponent? dynCmp = default!;

    public INodeEditForm? Form => dynCmp?.Instance as INodeEditForm;

    void ValidSubmit(EditContext context)
    {
        if (!context.Validate())
        {
            return;
        }

        Console.WriteLine("OnValidSubmit");
        OnValidSubmit.InvokeAsync();
    }

    void KeyDown(KeyboardEventArgs e)
    {
        //Console.WriteLine("e="+e.Code);
        //e = KeyS
        //    blazor.webassembly.js:1 e = ShiftLeft
        //    blazor.webassembly.js:1 e = AltLeft
        //    blazor.webassembly.js:1 e = Enter
        if (e.CtrlKey && e.Code == "KeyS")
        {
            EditForm!.OnValidSubmit.InvokeAsync();
        }
    }

    void OpenFormSourceCode()
    {
        developerControlService.OpenPageSource(NodeEditFormType!, "Mars.Nodes");
    }
}

<style>
    .NodeFormEditor1 label {
        font-weight: bold;
    }

    .ant-modal-mask, .ant-modal-wrap {
        z-index: 1070;
    }
</style>
