@using AppFront.Shared.Services
@using Microsoft.FluentUI.AspNetCore.Components
@using MarsCodeEditor2
@using Color = Microsoft.FluentUI.AspNetCore.Components.Color

@attribute [OptionEditFormForOptionAttribute(typeof(OpenIDClientOption))]
@attribute [Display(Name = "OpenID Connect")]
@attribute [AutoShowFormOnSettingsPage]

<EditOptionForm @ref=form TModel="OpenIDClientOption">

    <h3>Настройки OpenID Connect</h3>

    <div class="vstack gap-3">
        @foreach (var _sso in context.OpenIDClientConfigs)
        {
            var sso = _sso;
            <FluentCard>

                <FormItem2 For="()=>sso.Enable" Class="col mb-3">
                    <FluentSwitch @bind-Value="@sso.Enable" />
                </FormItem2>

                <FluentDivider Class="my-4" />

                <FormItem2 For="()=>sso.Title" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.Title" Class="w-100" />
                </FormItem2>

                <FormItem2 For="()=>sso.Slug" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.Slug" Class="w-100" />
                </FormItem2>

                <FormItem2 For="()=>sso.Driver" Class="col mb-3">
                    <FluentSelect @bind-Value="@sso.Driver"
                                  OptionText=@(s=>s.Value)
                                  OptionValue=@(s=>s.Key)
                                  Items="OpenIDClientOption.DriverList"
                                  Style="width: 250px;" />
                </FormItem2>

                <div class="d-flex align-items-end mb-3">
                    <FormItem2 For="()=>sso.IconUrl" Class="col 1mb-3 flex-fill">
                        <FluentTextField @bind-Value="@sso.IconUrl" Class="w-100" />
                    </FormItem2>
                    <FluentButton OnClick=@(e=>InsertImage(sso)) Class="mb-2">
                        <i class="bi bi-file-earmark-richtext"></i>
                    </FluentButton>
                </div>

                <FormItem2 For="()=>sso.AuthEndpoint" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.AuthEndpoint" Class="w-100" />
                </FormItem2>

                <FormItem2 For="()=>sso.TokenEndpoint" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.TokenEndpoint" Class="w-100" />
                </FormItem2>

                <FormItem2 For="()=>sso.ClientId" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.ClientId" Class="w-100" autocomplete="off" />
                </FormItem2>

                <FormItem2 For="()=>sso.ClientSecret" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.ClientSecret" Class="w-100" TextFieldType="@TextFieldType.Password" autocomplete="new-password" />
                </FormItem2>

                <FormItem2 For="()=>sso.CallbackPath" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.CallbackPath" Class="w-100" />
                </FormItem2>

                <FormItem2 For="()=>sso.Issuer" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.Issuer" Class="w-100" />
                </FormItem2>

                @* <FormItem2 For="()=>sso.SignedOutCallbackPath" Class="col mb-3">
            <FluentTextField @bind-Value="@sso.SignedOutCallbackPath" Class="w-100" />
            </FormItem2>

            <FormItem2 For="()=>sso.SignedOutRedirectUri" Class="col mb-3">
            <FluentTextField @bind-Value="@sso.SignedOutRedirectUri" Class="w-100" />
            </FormItem2> *@

                <FormItem2 For="()=>sso.Scopes" Class="col mb-3">
                    <FluentTextField @bind-Value="@sso.Scopes" Class="w-100" />
                </FormItem2>

                <FluentButton Appearance="Appearance.Stealth" OnClick=@(e=>DeleteSSOClick(sso))>Delete</FluentButton>

            </FluentCard>
        }
    </div>

    <div class="py-3 d-flex justify-content-end">
        <FluentButton OnClick="AddSSOClick">Add</FluentButton>

    </div>

</EditOptionForm>

@code {
    EditOptionForm<OpenIDClientOption> form = default!;
    [Inject] IAppMediaService mediaService { get; set; } = default!;

    void AddSSOClick()
    {
        form.Model.OpenIDClientConfigs.Add(new());
    }

    void DeleteSSOClick(OpenIDClientConfig sso)
    {
        form.Model.OpenIDClientConfigs.Remove(sso);
    }

    public async void InsertImage(OpenIDClientConfig sso)
    {
        var file = await mediaService.OpenSelectMedia();

        if (file is not null)
        {
            sso.IconUrl = file.UrlRelative;
            StateHasChanged();
        }
    }
}
