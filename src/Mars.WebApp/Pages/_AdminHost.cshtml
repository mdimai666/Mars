@page ""
@namespace Mars.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}
@using AppFront;
@using AppFront.Shared
@using Mars.Controllers
@using Mars.Core.Features
@using Mars.Host.Data
@using Mars.Host.Data.Entities
@using Mars.Host.Services
@using Mars.Host.Shared.Interfaces
@using Mars.Host.Shared.Models
@using Mars.Host.Shared.Services
@using Mars.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IUserService userService;
@inject IOptionService optionService
@inject IServiceProvider serviceProvider;
@inject IRequestContext requsetContext;
@{
    //TODO: Uncomment
    // AppAdmin.Program.IsPrerender = false;
    Q.IsPrerender = false;
    MarsAppFront af = new MarsAppFront
            {
                Configuration = new Mars.Core.Models.AppFrontSettingsCfg
                {
                    Mode = Mars.Core.Models.AppFrontMode.ServeStaticBlazor,
                    Url = "/dev",
                    Path = "dev"
                }
            };
    HttpContext.Items.Add(nameof(MarsAppFront), af);

    var vm = await ViewModelController.InitialSiteDataViewModel(serviceProvider, Request, devAdminPageData: true);

    Q.UpdateInitialSiteData(vm);

    var json = System.Text.Json.JsonSerializer.Serialize(vm);

    string bodyClass = "";
    bool loggedIn = User.Identity.IsAuthenticated;
    bodyClass += "logged-in ";

    try
    {

        if (User.Identity.IsAuthenticated)
        {
            var isAdmin = requsetContext.Roles.Contains("Admin");

            bodyClass += $"{(isAdmin ? "admin" : "")} ";
        }
    }
    catch (Exception)
    {

        throw;
    }

    bool isDarkTheme = false;
    if (Request.Cookies.ContainsKey("dark"))
    {
        isDarkTheme = bool.Parse(Request.Cookies["dark"] ?? "false");
    }

}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@optionService.SysOption.SiteName</title>
    <base href="/dev/" />

    @* <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> *@
    @* <link rel="icon" href="/favicon.ico" type="image/x-icon"> *@

    <link href="vendor/bootstrap/bootstrap.min.css" rel="stylesheet" />

    @*<link href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" rel="stylesheet"/>*@
    <link rel="preconnect" href="https://cdnjs.cloudflare.net">
    <link rel="dns-prefetch" href="https://cdnjs.cloudflare.net">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.3/font/bootstrap-icons.min.css" integrity="sha512-dPXYcDub/aeb08c63jRq/k6GaKccl256JQy/AnOq7CAnEZ9FzSL9wSbcZkMp4R26vBsMLFYH4kQ67/bbV8XaCQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@400;600&display=swap" rel="stylesheet" />

    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
    @* <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet" /> *@

    @*<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css" />*@
    @*<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css" />*@

    @*<link rel="stylesheet" type="text/css" href="vendor/bvi/css/bvi.min.css" />*@
    @*<link rel="stylesheet" type="text/css" href="vendor/kanban/jkanban.css" />*@


    <link href="css/style.css?v=000019" rel="stylesheet" />
    <link href="AppAdmin.styles.css?v=000019" rel="stylesheet" />
    <link href="/Mars.styles.css?v=000019" rel="stylesheet" />

</head>
<body class="@($"{bodyClass} {(isDarkTheme?"dark":"")}")" prerender>

    <script>
        //window._dev = true;
        function InitialSiteDataViewModel() {
            let vm = "@Html.Raw(TextZip.ZipToBase64(json))";
            return vm;
        }
    </script>
    <app id="app">
        @* <component type="typeof(AppAdmin.App)" render-mode="Static" /> *@
        <div class="flex-fill xcenter">
            <component type="typeof(AppFront.Shared.Components.SharedLoader1)" render-mode="Static" />
        </div>

    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
        </environment>
        <environment include="Development">
            –ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è —Å–º. –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
        </environment>
        <a href="" class="reload">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</a>
        <a class="dismiss">üóô</a>
    </div>


    <script src="vendor/bootstrap/bootstrap5.bundle.min.js"></script>
    <script src="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" type="module" async></script>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
    @* https://blazorsortable.theurlist.com/ *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.2/Sortable.min.js" integrity="sha512-TelkP3PCMJv+viMWynjKcvLsQzx6dJHvIGhfqzFtZKgAjKM1YPqcwzzDEoTc/BHjf43PcPzTQOjuTr4YdE8lNQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="_content/BlazorMonaco/jsInterop.js"></script>
    @* <script>var require = { paths: { vs: 'my-path/monaco-editor/min/vs' } };</script> *@
    <script src="_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js"></script>
    <script src="_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js"></script>
    @* <script src="https://unpkg.com/emmet-monaco-es/dist/emmet-monaco.min.js"></script> *@
    <script src="~/mars/js/emmet-monaco.min.js"></script>
    <script src="~/js/language-log.js" asp-append-version="true"></script>

    @*<script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>*@

    @*<script src="vendor/bvi/js/bvi.min.js"></script>*@
    @*<script src="vendor/kanban/jkanban.js"></script>*@

    <!-- https://github.com/nextapps-de/spotlight -->
    <script src="vendor/spotlight/spotlight.bundle.js"></script>

    <script src="./_content/mdimai666.Mars.AppFront.Main/js/highlight-extensions.js"></script>


    <script src="js/scripts.js?v=000019" asp-append-version="true"></script>
    @*<script src="js/mykanban.js" asp-append-version="true"></script>*@

    <!--BlazorScriptsAppend-->
    <script src="_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"></script>

    @if (Mars.UseStartup.MarsStartupInfo.IsDevelopment)
    {
        <script>window._dev = true;</script>
    }
    <script src="_framework/blazor.webassembly.js" autostart="false"></script>
    <script type="module">
        import { BrotliDecode } from '/mars/js/brotli.decode.min.js';
        Blazor.start({
            applicationCulture: 'ru-RU',
            loadBootResource: function (type, name, defaultUri, integrity) {
                if (type !== 'dotnetjs' && location.hostname !== 'localhost' && type !== 'configuration' && !window._dev) {
                    return (async function () {
                    const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                    if (!response.ok) {
                        throw new Error(response.statusText);
                    }
                    const originalResponseBuffer = await response.arrayBuffer();
                    const originalResponseArray = new Int8Array(originalResponseBuffer);
                    const decompressedResponseArray = BrotliDecode(originalResponseArray);
                    const contentType = type ===
                        'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';
                    return new Response(decompressedResponseArray,
                        { headers: { 'content-type': contentType } });
                    })();
                }
            }
        });
    </script>
    <!--//BlazorScriptsAppend-->
    @*<script src="_framework/blazor.server.js"></script>*@
</body>
</html>
