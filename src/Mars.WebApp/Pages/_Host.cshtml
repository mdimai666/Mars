@page "/"
@namespace Mars.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}
@using AppFront;
@using AppFront.Shared
@using Mars.Controllers
@using Mars.Core.Features
@using Mars.Core.Models;
@using Mars.Host.Data
@using Mars.Host.Data.Entities
@using Mars.Host.Models
@using Mars.Host.Services
@using Mars.Host.Shared.Dto.Users
@using Mars.Host.Shared.Interfaces
@using Mars.Host.Shared.Models
@using Mars.Host.Shared.Services
@using Mars.Host.Shared.WebSite.Models
@using Mars.Services
@using Mars.UseStartup
@using Mars.WebSiteProcessor.Endpoints;
@using Mars.WebSiteProcessor.Handlebars
@using Mars.WebSiteProcessor.Interfaces
@using Mars.WebSiteProcessor.Services
@using Mars.WebSiteProcessor.WebSite
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.DependencyInjection;

@inject IRequestContext requestContext
@inject IUserService userService;
@inject IOptionService optionService;
@inject IServiceProvider serviceProvider;
@inject IConfiguration configuration


@{
    //AppFront.Program.IsPrerender = true;
    Q.IsPrerender = true;
    var appFront = HttpContext.Items[nameof(MarsAppFront)] as MarsAppFront;
    AppFrontMode StartupFront_Mode = appFront.Configuration.Mode;

    string json = "";

    if (StartupFront_Mode == AppFrontMode.BlazorPrerender || StartupFront_Mode == AppFrontMode.ServeStaticBlazor)
    {
        var vm = await ViewModelController.InitialSiteDataViewModel(serviceProvider, Request);
        Q.UpdateInitialSiteData(vm);
        json = System.Text.Json.JsonSerializer.Serialize(vm);        
    }

    // PrepareHostHtml html = await PrepareHostHtml.GetHostTemplate(HttpContext, serviceProvider, typeof(Mars.Host.MainMarsHost).Assembly, requestContext, default);
    // var re = appFront.Features.Get<IWebRenderEngine>();
    UserDetail? userDetail = null;
    var cnToken = new CancellationTokenSource();

    if(requestContext.IsAuthenticated){
        userDetail = await userService.GetDetail(requestContext.User.Id, cnToken.Token);
    }

    var html = new PrepareHostHtml(appFront,optionService, new WebClientRequest(HttpContext.Request), userDetail, new RenderParam(), serviceProvider, default);
}

@Html.Raw(html.BeforeBodyHtml)
@*<component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />*@

@if (StartupFront_Mode == AppFrontMode.None)
{
    <p>none</p>
}
else if (StartupFront_Mode == AppFrontMode.HandlebarsTemplate)
{
    throw new NotImplementedException("Deplrecated method. See MapWebSiteProcessor");
}
else
{
    /*@if (StartupFront_Mode is AppFrontMode.ServeStaticBlazor or AppFrontMode.BlazorPrerender && html.isEmpty)
    {

    }
    else*/ if (StartupFront_Mode is AppFrontMode.ServeStaticBlazor or AppFrontMode.BlazorPrerender)
    {
        <script>
            function InitialSiteDataViewModel() {
                @*let vm = @Html.Raw(System.Web.HttpUtility.HtmlDecode(json));*@
                let vm = "@Html.Raw(TextZip.ZipToBase64(json))";
                return vm;
            }
        </script>


        <app id="app">
            @if (StartupFront_Mode is AppFrontMode.ServeStaticBlazor)
            {

            }
            else if (AppFrontInstance.AppType is not null)
            {
                @*<component type="typeof(App)" render-mode="Static" />*@
                <component type="AppFrontInstance.AppType" render-mode="Static" />
            }
            else
            {
                <div class="alert alert-dange">AppFrontInstance.AppType is null</div>
            }
        </app>

        <div id="blazor-error-ui">
            <environment include="Staging,Production">
                –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
            </environment>
            <environment include="Development">
                –ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è —Å–º. –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
            </environment>
            <a href="" class="reload">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</a>
            <a class="dismiss">üóô</a>
        </div>


    }
    else
    {
        <main>
            <div class="container">
                <h1>app not set</h1>
            </div>
        </main>
    }
}

@Html.Raw(html.AfterBodyHtml)
