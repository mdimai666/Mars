using System.Reflection;
using AutoFixture;
using FluentAssertions;
using Mars.Host.Data.Entities;
using Mars.Host.Shared.Dto.MetaFields;
using Mars.Host.Shared.Dto.Posts;
using Mars.Host.Shared.Dto.PostTypes;
using Mars.Host.Shared.Repositories;
using Mars.Integration.Tests.Attributes;
using Mars.Integration.Tests.Common;
using Mars.MetaModelGenerator;
using Mars.Shared.Contracts.MetaFields;
using Mars.Shared.Contracts.Posts;
using Mars.Shared.Contracts.PostTypes;
using Mars.Test.Common.Constants;
using Mars.Test.Common.FixtureCustomizes;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Test.Mars.MetaModelGenerator.Fixtures;

namespace Test.Mars.MetaModelGenerator;

public class RuntimeMetaTypeCompilerTests : MetaModelGeneratorTests
{
    private readonly RuntimeMetaTypeCompiler _runtimeMetaTypeCompiler;

    public RuntimeMetaTypeCompilerTests(ApplicationFixture appFixture) : base(appFixture)
    {
        _fixture.Customize(new FixtureCustomize());
        _runtimeMetaTypeCompiler = new RuntimeMetaTypeCompiler();
    }

    [IntegrationFact]
    public async Task GenerateFullSourceCode_ValidCode_Success()
    {
        //Arrange
        var (postType, _) = await SetupPostType(createPostCount: 0);
        var newClassName = GenSourceCodeMasterHelper.GetNormalizedTypeName(postType.TypeName);
        var mti = new MetaTypeInfo(newClassName, typeof(PostEntity), postType.MetaFields.ToArray(), new());

        //Act
        var code = _runtimeMetaTypeCompiler.GenerateFullSourceCode([mti], null);

        //Assert
        code.Should().Contain("<auto-generated/>");
        code.Should().Contain($"public partial class {newClassName}");
    }

    [IntegrationFact]
    public async Task Compile_ValidCode_Success()
    {
        //Arrange
        var (postType, _) = await SetupPostType(createPostCount: 0);
        var newClassName = GenSourceCodeMasterHelper.GetNormalizedTypeName(postType.TypeName);
        var mti = new MetaTypeInfo(newClassName, typeof(PostEntity), postType.MetaFields.ToArray(), new());

        //Act
        var dict = await _runtimeMetaTypeCompiler.Compile([mti], null);

        //Assert
        dict.Should().HaveCount(1);
        dict.Should().ContainKey(newClassName);
        var metaType = dict[newClassName];
        typeof(PostEntity).IsAssignableFrom(metaType);
        postType.MetaFields.Should().AllSatisfy(mf => metaType.GetProperty(mf.Key, BindingFlags.Instance | BindingFlags.Public).Should().NotBeNull());

    }

    #region SETUP
    async Task<(PostTypeEntity postType, PostDetail[] posts)> SetupPostType(string typeName = "mytype", int createPostCount = 3)
    {
        var postType = _fixture.Create<CreatePostTypeRequest>().ToQuery() with { TypeName = typeName };
        var metaField = _fixture.Create<MetaFieldDto>() with { Key = "str1", ParentId = Guid.Empty, Type = MetaFieldType.String };
        //var metaField = new MetaFieldDto() { Key = "str1", ParentId = Guid.Empty, Type = MetaFieldType.String,  };
        postType = postType with { MetaFields = [metaField] };
        var pts = AppFixture.ServiceProvider.GetRequiredService<IPostTypeRepository>();
        var ps = AppFixture.ServiceProvider.GetRequiredService<IPostRepository>();
        var postTypeId = await pts.Create(postType, default);

        var posts = _fixture.CreateMany<CreatePostRequest>(createPostCount).Select((post, i) => post.ToQuery(UserConstants.TestUserId, postType.MetaFields.ToDictionary(s => s.Id)) with
        {
            Title = $"title - {i}",
            Type = postType.TypeName,
            MetaValues = [_fixture.Create<ModifyMetaValueDetailQuery>() with {
                MetaFieldId = metaField.Id,
                MetaField = metaField,
                StringShort = $"v{i}"
            }]
        }).ToArray();

        //var postTypeDetail = (await pts.GetDetailByName(postType.TypeName, default))!;

        foreach (var post in posts) await ps.Create(post, default);

        using var ef = AppFixture.DbFixture.DbContext;

        var postTypeEntity = ef.PostTypes.Include(s => s.MetaFields)
                                        .First(s => s.TypeName == typeName);

        var postList = await ps.ListAllDetail(new() { Type = postType.TypeName }, default);
        //return (postTypeDetail, postList.ToArray());

        return (postTypeEntity, postList.ToArray());
    }
    #endregion
}
